@using PhotoSync.Domain;
@using PhotoSync.Infrastructure;
@using System.IO;
@using System.Web;
@using PhotoSync.ViewModels;
@inject AppState appState;

@if (this.SelectedFolder.IsExcluded)
{
    <div>Folder '@this.SelectedFolder.SourcePath' excluded.</div>
}
else if(this.photos is null || (!this.photos.Any() && !this.loading))
{
    <div>No photos found.</div>
} 
else
{
    foreach (var photo in this.photos)
    {
        <div>
            <img style="max-height: 100px; max-width: 100px" src="@this.MakePhotoUrl(photo.RelativePath)" />
            @photo.Name
        </div>
    }    
}

@code {
    private SelectedFolderViewModel folder = new();
    private bool shouldRender;
    private bool loading = true;
    private IReadOnlyList<Photo> photos;

    [Parameter]
    public SelectedFolderViewModel SelectedFolder { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        this.shouldRender = this.folder.SourcePath != this.SelectedFolder.SourcePath;
        this.folder = this.SelectedFolder;
        if (this.shouldRender)
        {
            await this.LoadPhotos();
        }
    }

    protected override bool ShouldRender() => this.shouldRender;

    private async Task LoadPhotos()
    {
        if (this.appState.Library is null || this.SelectedFolder.IsExcluded)
        {
            return;
        }

        await this.appState.ShowLoadingModal();
        this.photos = this.appState.Library.Collection.Photos.Where(x => x.RelativeFolder == this.SelectedFolder.RelativePath).ToList();
        await this.appState.HideLoadingModal();
    }

    private string MakePhotoUrl(string relativePath)
    {
        if (this.appState.Library is null)
        {
            return string.Empty;
        }

        var path = Path.Combine(this.appState.Library.SourceFolder, relativePath);
        var imageBytes = System.IO.File.ReadAllBytes(path);
        var base64Image = Convert.ToBase64String(imageBytes);
        return $"data:image/png;base64,{base64Image}";
    }
}
